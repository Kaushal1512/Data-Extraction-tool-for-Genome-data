}
else
{
updateCheckboxGroupInput(session,"ddepolist","Choose Depo(s):",choices=unique(df()$DEPO_NAME),selected=unique(df()$DEPO_NAME))
}
if(input$ddasa%%2 == 0)
{
updateCheckboxGroupInput(session,"ddatelist","Choose Date(s):",choices=unique(df()$DISPATCH_DATE))
}
else
{
updateCheckboxGroupInput(session,"ddatelist","Choose Date(s):",choices=unique(df()$DISPATCH_DATE),selected=unique(df()$DISPATCH_DATE))
}
})
output$bar<-renderPlot({
dis<-input$xaxis
print(dis)
if(dis=='SIZE')
{
par(mar=c(11,4,6,4))
counts<-(table(ldf()$SIZE))
x<-barplot(counts,main="Size wise analysis",xlab="Size of the Product",col="blue")
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='PRODUCT_DESCRIPTION')
{
par(mar=c(15,4,6,4))
counts<-(table(ldf()$PRODUCT_DESCRIPTION))
x<-barplot(counts,main=" Product Wise ",col="blue",las=2)
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='DISPATCH_DATE')
{
par(mar=c(11,4,6,4))
counts<-(table(ldf()$DISPATCH_DATE))
x<-barplot(counts,main="Date wise",col="blue",las=2)
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='TYPE')
{
par(mar=c(11,4,6,4))
counts<-(table(ldf()$TYPE))
x<-barplot(counts,main=" Type Wise ",xlab="Type of the product",col="blue")
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='PACKING_TYPE')
{
par(mar=c(11,4,6,4))
counts<-(table(ldf()$PACKING_TYPE))
x<-barplot(counts,main=" Packing Type Wise ",xlab="Packing Type",col="blue")
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='TYPE_OF_SKU')
{
par(mar=c(11,4,6,4))
print(counts<-(table(ldf()$TYPE_OF_SKU)))
x<-barplot(counts,main=" Type of SKU wise ",xlab="Type of Sku",col="blue")
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='CRTN_FILLING')
{
par(mar=c(11,4,6,4))
counts<-(table(ldf()$CRTN_FILLING))
x<-barplot(counts,main="Cartoon Filling Wise ",xlab=" Cartoon Filling",col="blue")
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='PACK_OF_QTY')
{
par(mar=c(11,4,6,4))
counts<-(table(ldf()$PACK_OF_QTY))
x<-barplot(counts,main=" Quantity Wise ",xlab=" Quantity ",col="blue")
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='DEPO_NAME')
{
counts<-(table(ldf()$DEPO_NAME))
par(mar=c(11,4,6,4))
x<-barplot(counts,main=" Depo Wise  ",col="blue",las=2)
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='PARTY_NAME')
{
par(mar=c(14,4,6,4))
counts<-(table(ldf()$PARTY_NAME))
x<-barplot(counts,main=" Party Wise ",col="blue",las=2)
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='DISPATCH_DATE')
{
par(mar=c(11,4,6,4))
counts<-(table(ldf()$DISPATCH_DATE))
x<-barplot(counts,main=" SALES ",col="blue",las=2)
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else {}
})
output$dconts<-renderTable({
data()
})
}
shinyApp(ui=ui,server=server)
plist=c()
library(data.table)
library(DT)
library(readxl)
library(xlsx)
library(ggplot2)
library(knitr)
library(magrittr)
library(rmarkdown)
library(shiny)
library(plotly)
library(fOptions)
library(sde)
library(DiagrammeR)
library(tidyverse)
plist=c()
tdf=NULL
ui<-fluidPage(title="Pan Logistics",
tabsetPanel(
tabPanel(title="data",
sidebarLayout( sidebarPanel(
fileInput('file', 'Please Upload Data Parang Bhai',
accept = c(".xlsx")
)
),
# Show a plot of the generated distribution
mainPanel(
tableOutput('contents')
)
)
),
tabPanel(title="Analysis",
sidebarLayout( sidebarPanel(
uiOutput("x"),
#uiOutput("y"),
uiOutput("ddui"),
actionButton("ddsa","Select all Depo"),
uiOutput("dpui"),
actionButton("dpsa","Select all Party"),
uiOutput("ddaui"),
actionButton("ddasa","Select all Dates "),
uiOutput("dsui"),
actionButton("dssa","Select all Products")
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel(title="plot",
plotOutput("bar")
),
tabPanel(title="Data",
tableOutput('dconts')))
)
)
)
)
)
server<-function(input,output,session)
{
# list of reactives
df <- reactive({
#req(input$file)
inFile <- input$file
if(is.null(inFile))
return(NULL)
file.rename(inFile$datapath,
paste(inFile$datapath, ".xlsx", sep=""))
tdf<<-read_excel(paste(inFile$datapath, ".xlsx", sep=""), 1)
sdf<-read_excel(paste(inFile$datapath, ".xlsx", sep=""), 1)
#sdf[,11] <- as.character(sdf[,11])
return(sdf)
})
data<-reactive({
#' set a default
if(is.null(input$ddepolist) & is.null(input$dskulist)){
return(NULL) ## simply return the data
} else {
df()[(df()$DEPO_NAME %in% input$ddepolist & df()$PRODUCT_DESCRIPTION %in% input$dskulist) & (df()$PARTY_NAME %in% input$dpartylist) & (df()$DISPATCH_DATE %in% input$ddatelist) ,]
}
})
beta<-reactive({
write.csv(data(),"sdf.csv")
read_csv("sdf.csv")
})
ldf<-reactive({
#' set a default
if(is.null(input$ddepolist) & is.null(input$dskulist)){
return(NULL) ## simply return the data
} else {
beta()[(beta()$DEPO_NAME %in% input$ddepolist & beta()$PRODUCT_DESCRIPTION %in% input$dskulist) & (beta()$PARTY_NAME %in% input$dpartylist) & (beta()$DISPATCH_DATE %in% input$ddatelist) ,]
}
})
# Other code
output$contents<-renderTable({
inFile <- input$file
if(is.null(inFile))
return(NULL)
file.rename(inFile$datapath,
paste(inFile$datapath, ".xlsx", sep=""))
read_excel(paste(inFile$datapath, ".xlsx", sep=""), 1)
})
output$x <- renderUI({
selectInput('xaxis', 'Choose X-axis', colnames(df()),selected=NULL)
})
output$y <- renderUI({
selectInput('yaxis', 'Choose Y-axis', colnames(df()),selected=NULL)
})
output$ddui <- renderUI({
checkboxGroupInput('ddepolist', 'Choose Depo(s)', unique(df()$DEPO_NAME))
})
output$dpui <- renderUI({
checkboxGroupInput('dpartylist', 'Choose Party(s)', unique(df()$PARTY_NAME))
})
output$ddaui <- renderUI({
checkboxGroupInput('ddatelist', 'Choose Date(s)', unique(df()$DISPATCH_DATE))
})
output$dsui <- renderUI({
checkboxGroupInput('dskulist', 'Choose Product(s)', unique(df()$PRODUCT_DESCRIPTION))
})
observe({
if(input$dpsa%%2 == 0)
{
updateCheckboxGroupInput(session,"dpartylist","Choose Party(s):",choices=unique(df()$PARTY_NAME))
}
else
{
updateCheckboxGroupInput(session,"dpartylist","Choose Party(s):",choices=unique(df()$PARTY_NAME),selected=unique(df()$PARTY_NAME))
}
if(input$dssa%%2 == 0)
{
updateCheckboxGroupInput(session,"dskulist","Choose Product(s):",choices=unique(df()$PRODUCT_DESCRIPTION))
}
else
{
updateCheckboxGroupInput(session,"dskulist","Choose Product(s):",choices=unique(df()$PRODUCT_DESCRIPTION),selected=unique(df()$PRODUCT_DESCRIPTION))
}
if(input$ddsa%%2 == 0)
{
updateCheckboxGroupInput(session,"ddepolist","Choose Depo(s):",choices=unique(df()$DEPO_NAME))
}
else
{
updateCheckboxGroupInput(session,"ddepolist","Choose Depo(s):",choices=unique(df()$DEPO_NAME),selected=unique(df()$DEPO_NAME))
}
if(input$ddasa%%2 == 0)
{
updateCheckboxGroupInput(session,"ddatelist","Choose Date(s):",choices=unique(df()$DISPATCH_DATE))
}
else
{
updateCheckboxGroupInput(session,"ddatelist","Choose Date(s):",choices=unique(df()$DISPATCH_DATE),selected=unique(df()$DISPATCH_DATE))
}
})
output$bar<-renderPlot({
dis<-input$xaxis
print(dis)
if(dis=='SIZE')
{
par(mar=c(11,4,6,4))
counts<-(table(ldf()$SIZE))
x<-barplot(counts,main="Size wise analysis",xlab="Size of the Product",col="blue")
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='PRODUCT_DESCRIPTION')
{
par(mar=c(15,4,6,4))
counts<-(table(ldf()$PRODUCT_DESCRIPTION))
x<-barplot(counts,main=" Product Wise ",col="blue",las=2)
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='DISPATCH_DATE')
{
par(mar=c(11,4,6,4))
counts<-(table(ldf()$DISPATCH_DATE))
x<-barplot(counts,main="Date wise",col="blue",las=2)
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='TYPE')
{
par(mar=c(11,4,6,4))
counts<-(table(ldf()$TYPE))
x<-barplot(counts,main=" Type Wise ",xlab="Type of the product",col="blue")
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='PACKING_TYPE')
{
par(mar=c(11,4,6,4))
counts<-(table(ldf()$PACKING_TYPE))
x<-barplot(counts,main=" Packing Type Wise ",xlab="Packing Type",col="blue")
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='TYPE_OF_SKU')
{
par(mar=c(11,4,6,4))
print(counts<-(table(ldf()$TYPE_OF_SKU)))
x<-barplot(counts,main=" Type of SKU wise ",xlab="Type of Sku",col="blue")
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='CRTN_FILLING')
{
par(mar=c(11,4,6,4))
counts<-(table(ldf()$CRTN_FILLING))
x<-barplot(counts,main="Cartoon Filling Wise ",xlab=" Cartoon Filling",col="blue")
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='PACK_OF_QTY')
{
par(mar=c(11,4,6,4))
counts<-(table(ldf()$PACK_OF_QTY))
x<-barplot(counts,main=" Quantity Wise ",xlab=" Quantity ",col="blue")
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='DEPO_NAME')
{
counts<-(table(ldf()$DEPO_NAME))
par(mar=c(11,4,6,4))
x<-barplot(counts,main=" Depo Wise  ",col="blue",las=2)
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='PARTY_NAME')
{
par(mar=c(14,4,6,4))
counts<-(table(ldf()$PARTY_NAME))
x<-barplot(counts,main=" Party Wise ",col="blue",las=2)
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else if(dis=='DISPATCH_DATE')
{
par(mar=c(11,4,6,4))
counts<-(table(ldf()$DISPATCH_DATE))
x<-barplot(counts,main=" SALES ",col="blue",las=2)
text(x, counts +2 , labels=counts, xpd=TRUE)
}
else {}
})
output$dconts<-renderTable({
data()
})
}
shinyApp(ui=ui,server=server)
q()
shiny::runApp('C:/Users/pmp35/Desktop/r data files')
install.packages("tidyverse")
runApp('C:/Users/pmp35/Desktop/r data files')
library(data.table)
library(DT)
library(readxl)
library(xlsx)
library(ggplot2)
library(knitr)
library(magrittr)
library(rmarkdown)
library(shiny)
library(plotly)
library(fOptions)
library(sde)
library(DiagrammeR)
library(tidyverse)
x<-read_csv("sdf.csv")
table()
barplot(x$SIZE)
shiny::runApp('C:/Users/pmp35/Desktop/Computational_Finance-Shiny-master')
runApp('C:/Users/pmp35/Desktop/Computational_Finance-Shiny-master')
library(car)
barplot(x$SIZE)
library(xlsx)
install.packages(c("classInt", "maptools", "rgdal", "sp", "spdep", "weights"))
install.packages('IRkernel')
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
install.packages("GEOquery")
source('http://bioconductor.org/biocLite.R')
biocLite('GEOquery')
source('http://bioconductor.org/biocLite.R')
install.packages("bioconductor")
install.packages(GEOquery)
install.packages('GEOquery')
source("https://bioconductor.org/biocLite.R")
require(GEOquery)
biocLite("GEOquery")
install.packages("BiocManager")
biocLite("GEOquery")
BiocManager::install("GEOquery")
a
library(GEOquery)
BiocManager::install("GEOquery")
install.packages("scales")
library(GEOquery)
library(installr)
installr: install.packages("installr")
install.packages("installr")
library(GEOquery)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(GEOquery)
version
install_github("r-lib/rlang", build_vignettes = TRUE)
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
update.packages()
library(GEOquery)
update.packages(rlang)
update.packages('rlang')
library(GEOquery)
rlang
rlang version
update.packages(rlang)
update.packages('rlang')
update.packages()
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
rlang version
update.packages()
library(GEOquery)
shiny::runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp()
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp()
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
length(genes)
genes[1:5]
genes <- featureNames(gse);
length(genes)
genes[1:5]
gse <- getGEO("GSE79973", GSEMatrix = TRUE)[[1]]
dim(gse)
dataset.id <- "GSE79973"
genes <- featureNames(gse);
length(genes)
genes[1:5]
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
summary(mat)
summary(mat)
gse <- getGEO("GSE79973", GSEMatrix = TRUE)[[1]]
dim(gse)
dataset.id <- "GSE79973"
mat <- exprs(gse)
summary(mat)
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
gse <- getGEO("GSE79973", GSEMatrix = TRUE)[[1]]
gse <- getGEO("GSE79973", GSEMatrix = TRUE)[[1]]
library(GEOquery);
rm(list=ls())
gse <- getGEO("GSE79973", GSEMatrix = TRUE)[[1]]
gse <- getGEO("GSE79973", GSEMatrix = TRUE)[[1]]
dim(gse)
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runExample("10_download")
runExample("10_download")
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
input$exp
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
runApp('C:/Users/pmp35/Desktop/Extra Projects/GEnome Bioada/Extraction R code_files/R extraction code GUI')
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
